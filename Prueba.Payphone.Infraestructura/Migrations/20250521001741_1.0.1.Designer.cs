// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Prueba.Payphone.Infraestructura.Persistencia;

#nullable disable

namespace Prueba.Payphone.Infraestructura.Migrations
{
    [DbContext(typeof(ContextoBaseDatos))]
    [Migration("20250521001741_1.0.1")]
    partial class _101
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Prueba.Payphone.Dominio.Entidades.Billetera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DocumentoIdentidad")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("DocumentId")
                        .HasComment("Documento de identidad del propietario de la billetera");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedAt")
                        .HasComment("Fecha y hora de última actualización de la billetera");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasComment("Fecha y hora de creación de la billetera");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name")
                        .HasComment("Nombre completo del propietario de la billetera");

                    b.Property<decimal>("Saldo")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Balance")
                        .HasComment("Saldo actual de la billetera en moneda base");

                    b.HasKey("Id");

                    b.HasIndex("DocumentoIdentidad")
                        .IsUnique()
                        .HasDatabaseName("IX_Wallets_DocumentId");

                    b.ToTable("Wallets", "dbo");
                });

            modelBuilder.Entity("Prueba.Payphone.Dominio.Entidades.Movimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BilleteraId")
                        .HasColumnType("int")
                        .HasColumnName("WalletId")
                        .HasComment("ID de la billetera asociada al movimiento");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasComment("Fecha y hora de creación del movimiento");

                    b.Property<decimal>("Monto")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Amount")
                        .HasComment("Monto del movimiento en la moneda base");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Type")
                        .HasComment("Tipo de movimiento: Débito o Crédito");

                    b.HasKey("Id");

                    b.HasIndex("BilleteraId")
                        .HasDatabaseName("IX_Movements_WalletId");

                    b.ToTable("Movements", "dbo");
                });

            modelBuilder.Entity("Prueba.Payphone.Dominio.Entidades.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive")
                        .HasComment("Indica si la cuenta de usuario está activa");

                    b.Property<string>("CorreoElectronico")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Email")
                        .HasComment("Dirección de correo electrónico del usuario");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt")
                        .HasComment("Fecha y hora de creación del usuario");

                    b.Property<string>("HashClave")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("PasswordHash")
                        .HasComment("Contraseña hasheada");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Username")
                        .HasComment("Nombre de usuario para autenticación");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Sal")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("Salt")
                        .HasComment("Sal para el hash de la contraseña");

                    b.Property<DateTime?>("UltimoAcceso")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastAccess")
                        .HasComment("Fecha y hora del último acceso exitoso");

                    b.HasKey("Id");

                    b.HasIndex("CorreoElectronico")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.HasIndex("NombreUsuario")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Username");

                    b.ToTable("Users", "dbo");
                });

            modelBuilder.Entity("Prueba.Payphone.Dominio.Entidades.Movimiento", b =>
                {
                    b.HasOne("Prueba.Payphone.Dominio.Entidades.Billetera", null)
                        .WithMany()
                        .HasForeignKey("BilleteraId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
